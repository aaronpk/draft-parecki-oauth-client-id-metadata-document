



Web Authorization Protocol                                    A. Parecki
Internet-Draft                                                      Okta
Intended status: Informational                                  E. Smith
Expires: 24 November 2024                                    23 May 2024


                   OAuth Client ID Metadata Document
         draft-parecki-oauth-client-id-metadata-document-latest

Abstract

   This specification defines an endpoint an OAuth client can use to
   host its client metadata, as well as the use of this URL as a
   client_id in an OAuth flow.  This enables OAuth clients to work with
   authorization servers where it has no prior relationship, and enables
   the authorization server to fetch metadata about the client.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://aaronpk.github.io/draft-parecki-oauth-client-id-metadata-
   document/draft-parecki-oauth-client-id-metadata-document.html.
   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-parecki-oauth-client-id-
   metadata-document/.

   Discussion of this document takes place on the Web Authorization
   Protocol Working Group mailing list (mailto:oauth@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/oauth/.
   Subscribe at https://www.ietf.org/mailman/listinfo/oauth/.

   Source for this draft and an issue tracker can be found at
   https://github.com/aaronpk/draft-parecki-oauth-client-id-metadata-
   document.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 24 November 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Client Identifier
   4.  Client Information Discovery
     4.1.  Redirect URL Registration
   5.  Security Considerations
     5.1.  Public vs Confidential Clients
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   In order for an OAuth 2.0 [RFC6749] client to utilize an OAuth 2.0
   authorization server, the client needs to establish a unique
   identifier, and needs to to provide the server with metadata about
   the application, such as the application name and icon.  In cases
   where a client is interacting with authorization servers that it has
   no relationship with, manual registration is impossible.

   While Dynamic Client Registration [RFC7591] can provide a method for
   a previously unknown client to establish itself at an authorization
   server and obtain a client idenfier, this is not always practical in
   some deployments and can create additional challenges around
   management of the registration data and cleanup of inactive clients.

   This specification describes how an OAuth 2.0 client can publish its
   own registration information and avoid the need for pre-registering
   at each authorization server.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Client Identifier

   This specification defines the client identifier as a URL with the
   following restrictions.  Client identifier URLs MUST have an "https"
   scheme, MUST contain a path component, MUST NOT contain single-dot or
   double-dot path segments, MAY contain a query string component, MUST
   NOT contain a fragment component, MUST NOT contain a username or
   password component, and MAY contain a port.

4.  Client Information Discovery

   One purpose of registering clients at the authorization server is so
   that the authorziation server has additional information about the
   client that can be used during an OAuth flow, such as presenting
   information about the client to the user in an authorziation consent
   screen, for example the client name and logo.

4.1.  Redirect URL Registration

   According to [I-D.draft-ietf-oauth-security-topics], the
   authorization server MUST require registration of redirect URLs, and
   compare redirect URLs with exact string matching.  This client
   information discovery establishes a registered redirect URL with the
   authorization server which is used when comparing the redirect URL in
   an authorization request against the registered redirect URLs.

5.  Security Considerations

5.1.  Public vs Confidential Clients

   Since the client establishes its own registration data at the
   authorization server, prior coordination of client credentials is not
   possible.  However, clients MAY establish credentials at the
   authorization server by using authentication methods that use public/
   private key pairs, by publishing the public key in their metadata
   document.

   For example, the client MAY include the following properties in its
   metadata document to establish a public key and the private_key_jwt
   authentication method:

   { ...  "token_endpoint_auth_method": "private_key_jwt", "jwks_uri":
   "https://client.example.com/jwks.json" ... }

   This establishes this client as a confidential client, and any
   communication with the authorization server MUST include client
   authentication of the registered type.

6.  IANA Considerations

   This document has no IANA actions.

7.  References

7.1.  Normative References

   [I-D.draft-ietf-oauth-security-topics]
              Lodderstedt, T., Bradley, J., Labunets, A., and D. Fett,
              "OAuth 2.0 Security Best Current Practice", Work in
              Progress, Internet-Draft, draft-ietf-oauth-security-
              topics-27, 7 May 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-
              security-topics-27>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6749>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

7.2.  Informative References

   [RFC7591]  Richer, J., Ed., Jones, M., Bradley, J., Machulak, M., and
              P. Hunt, "OAuth 2.0 Dynamic Client Registration Protocol",
              RFC 7591, DOI 10.17487/RFC7591, July 2015,
              <https://www.rfc-editor.org/rfc/rfc7591>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Aaron Parecki
   Okta
   Email: aaron@parecki.com


   Emelia Smith
   Email: emelia@brandedcode.com
